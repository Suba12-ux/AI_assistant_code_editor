import os
import fnmatch
from pathlib import Path
from config import Config

class ProjectManager:
    def __init__(self, project_path=None):
        self.project_path = project_path or Config.PROJECT_PATH
        self.file_tree = {}
        self.all_files = []
        
    def should_ignore(self, path):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª/–ø–∞–ø–∫—É"""
        for pattern in Config.IGNORE_PATTERNS:
            if fnmatch.fnmatch(path.name, pattern) or pattern in str(path):
                return True
        return False
    
    def scan_project(self):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç –∏ —Å—Ç—Ä–æ–∏—Ç –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤"""
        print(f"üîç –°–∫–∞–Ω–∏—Ä—É—é –ø—Ä–æ–µ–∫—Ç: {self.project_path}")
        
        self.file_tree = self._scan_directory(self.project_path)
        return self.file_tree
    
    def _scan_directory(self, directory, level=0):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"""
        result = {}
        
        try:
            items = sorted(os.listdir(directory))
        except PermissionError:
            return {"error": f"Permission denied: {directory}"}
        
        for item in items:
            item_path = Path(directory) / item
            
            if self.should_ignore(item_path):
                continue
                
            if item_path.is_dir():
                result[item] = {
                    "type": "directory",
                    "content": self._scan_directory(item_path, level + 1)
                }
            else:
                result[item] = {
                    "type": "file",
                    "size": item_path.stat().st_size
                }
                self.all_files.append(item_path)
        
        return result
    
    def get_file_content(self, file_path, max_lines=200):
        """–ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É"""
        try:
            if file_path.stat().st_size > Config.MAX_FILE_SIZE:
                return f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_path.stat().st_size} –±–∞–π—Ç). –ü—Ä–æ–ø—É—Å–∫–∞—é..."
                
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
                lines = content.split('\n')
                if len(lines) > max_lines:
                    return '\n'.join(lines[:max_lines]) + f"\n\n... –∏ –µ—â–µ {len(lines) - max_lines} —Å—Ç—Ä–æ–∫"
                return content
                
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}"
    
    def format_file_tree(self, tree=None, indent=0):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ —á–∏—Ç–∞–µ–º—É—é —Å—Ç—Ä–æ–∫—É"""
        if tree is None:
            tree = self.file_tree
            
        result = ""
        prefix = "  " * indent
        
        for name, info in tree.items():
            if info["type"] == "directory":
                result += f"{prefix}üìÅ {name}/\n"
                result += self.format_file_tree(info["content"], indent + 1)
            else:
                result += f"{prefix}üìÑ {name} ({info['size']} –±–∞–π—Ç)\n"
                
        return result
    
    def find_files_by_extension(self, extension):
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º"""
        return [f for f in self.all_files if f.suffix == extension]
    
    def get_key_files(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞"""
        key_files = []
        priority_extensions = ['.py', '.js', '.ts', '.json', '.md', 'Dockerfile', 'requirements.txt']
        
        for ext in priority_extensions:
            key_files.extend(self.find_files_by_extension(ext))
            
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        return key_files[:10]